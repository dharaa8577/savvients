package main

import "fmt"

func quicksort(arr []int) []int {

	if len(arr) <= 1 {

		return arr
	}

	pivot := arr[len(arr)/2]
	left := make([]int, 0, len(arr))
	right := make([]int, 0, len(arr))
	equal := make([]int, 0, len(arr))

	for _, v := range arr {

		switch {

		case v < pivot:
			left = append(left, v)
		case v == pivot:
			equal = append(equal, v)
		case v > pivot:

			right = append(right, v)

		}
	}

	left = quicksort(left)
	right = quicksort(right)

	left = append(left, equal...)
	left = append(left, right...)

	return left
}

func main() {
	arr := []int{4, 2, 7, 8, 1, 3, 5, 6, 9, 0, 25, 22, 34, 55, 65, 73, 89, 87, 67, 56, 57, 87, 22, 28, 39}

	fmt.Println(quicksort(arr))
}

// IT takes arrary  of integers, selects the first element as the pivot and then divides the array into two parts: element less than or equal to the pivot. it then recursively sorts each of these parts and combines them back together
